#import <XCTest/XCTest.h>
#import "SwrveLocalStorage.h"
#import "SwrveTestHelper.h"
#import "SwrveUser.h"
#import "SwrveProfileManager.h"

@interface SwrveProfileManager ()

- (NSData *)archiveSwrveUserArray:(NSArray *)array;
- (NSArray *)swrveUsers;

@end

@interface SwrveTestLocalStorage : XCTestCase

@end

@implementation SwrveTestLocalStorage

- (void)setUp {
    [super setUp];
    [SwrveTestHelper setUp];
}

- (void)tearDown {
    [SwrveTestHelper tearDown];
    [super tearDown];
}

- (void)testApplicationSupportCreatesNewFile {
    NSFileManager *fileManager = [NSFileManager defaultManager];
    NSString  *appSupportDir = [SwrveLocalStorage applicationSupportPath];
    XCTAssertTrue([fileManager fileExistsAtPath:appSupportDir], @"File is not generated by Application Support");
}

- (void)testApplicationSupportDoesntOverride{
    NSString *path = [NSString pathWithComponents:@[[SwrveLocalStorage applicationSupportPath], @"testFile"]];
    [@"[]" writeToFile:path atomically:YES encoding:NSUTF8StringEncoding error:nil];


    //call path again, and then check if the written file is still present and unaltered
    path = [NSString pathWithComponents:@[[SwrveLocalStorage applicationSupportPath], @"testFile"]];

    NSString* content = [NSString stringWithContentsOfFile:path
                                                  encoding:NSUTF8StringEncoding
                                                     error:NULL];

    XCTAssertEqualObjects(content, @"[]", @"testApplicationSupportDoesntOverride: %@ does not equal '[]'", content);
}

- (NSUserDefaults*)defaults {
    return [NSUserDefaults standardUserDefaults];
}

- (void)testFlushFrequencyKey {
    [SwrveLocalStorage saveFlushFrequency:999];
    double result = [SwrveLocalStorage flushFrequency];
    double expected = [[self defaults] doubleForKey:@"swrve_cr_flush_frequency"];
    XCTAssertTrue(result == expected);
    
    //remove from defaults
    [[self defaults] removeObjectForKey:@"swrve_cr_flush_frequency"];
    result = [[self defaults] doubleForKey:@"swrve_cr_flush_frequency"];
    XCTAssertTrue(result == 0);
    //it will still be in backup store
    result = [SwrveLocalStorage flushFrequency];
    XCTAssertTrue(result == 999);
}

- (void)testFlushDelayKey {
    [SwrveLocalStorage saveflushDelay:999];
    double result = [SwrveLocalStorage flushDelay];
    double expected = [[self defaults] doubleForKey:@"swrve_cr_flush_delay"];
    XCTAssertTrue(result == expected);
    
    //remove from defaults
    [[self defaults] removeObjectForKey:@"swrve_cr_flush_delay"];
    result = [[self defaults] doubleForKey:@"swrve_cr_flush_delay"];
    XCTAssertTrue(result == 0);
    //it will still be in backup store
    result = [SwrveLocalStorage flushDelay];
    XCTAssertTrue(result == 999);
}

- (void)testETagKey {
    [SwrveLocalStorage saveETag:@"SomeETag" forUserId:@"TestUser"];
    NSString *result = [SwrveLocalStorage eTagForUserId:@"TestUser"];
    NSString *expected = [[self defaults] stringForKey:@"TestUsercampaigns_and_resources_etag"];
    XCTAssertTrue([result isEqualToString:expected]);
    
    //remove from defaults
    [[self defaults] removeObjectForKey:@"TestUsercampaigns_and_resources_etag"];
    result = [[self defaults] stringForKey:@"TestUsercampaigns_and_resources_etag"];
    XCTAssertNil(result);
    //it will still be in backup store
    result = [SwrveLocalStorage eTagForUserId:@"TestUser"];
    XCTAssertTrue([result isEqualToString:@"SomeETag"]);
}

- (void)testDeviceTokenKey {
    [SwrveLocalStorage saveDeviceToken:@"SomeDeviceToken"];
    NSString *result = [SwrveLocalStorage deviceToken];
    NSString *expected = [[self defaults] stringForKey:@"swrve_device_token"];
    XCTAssertTrue([result isEqualToString:expected]);
    
    //remove from defaults
    [[self defaults] removeObjectForKey:@"swrve_device_token"];
    result = [[self defaults] stringForKey:@"swrve_device_token"];
    XCTAssertNil(result);
    //it will still be in backup store
    result = [SwrveLocalStorage deviceToken];
    XCTAssertTrue([result isEqualToString:@"SomeDeviceToken"]);
}

- (void)testDeviceUUIDKey {
    NSString *udid = [[NSUUID UUID] UUIDString];
    [SwrveLocalStorage saveDeviceUUID:udid];
    NSString *result = [SwrveLocalStorage deviceUUID];
    NSString *expected = [[self defaults] objectForKey:@"swrve_device_uuid"];
    XCTAssertTrue([result isEqualToString: expected]);
    
    //remove from defaults
    [[self defaults] removeObjectForKey:@"swrve_device_uuid"];
    result = [[self defaults] stringForKey:@"swrve_device_uuid"];
    XCTAssertNil(result);
    //it will still be in backup store
    result = [SwrveLocalStorage deviceUUID];
    XCTAssertTrue([result isEqualToString:udid]);
}

- (void)testSwrveUserIDKey {
    [SwrveLocalStorage saveSwrveUserId:@"SomeUserID"];
    NSString *result = [SwrveLocalStorage swrveUserId];
    NSString *expected = [[self defaults] objectForKey:@"swrve_user_id"];
    XCTAssertTrue([result isEqualToString:expected]);
    
    //remove from defaults
    [[self defaults] removeObjectForKey:@"SomeUserID"];
    result = [[self defaults] stringForKey:@"SomeUserID"];
    XCTAssertNil(result);
    //it will still be in backup store
    result = [SwrveLocalStorage swrveUserId];
    XCTAssertTrue([result isEqualToString:@"SomeUserID"]);
}

- (void)testSwrveTrackingStateKey {
    enum SwrveTrackingState trackingStateUnknown = [SwrveLocalStorage trackingState];
    XCTAssertEqual(UNKNOWN, trackingStateUnknown); // UNKNOWN to start with
    [SwrveLocalStorage saveTrackingState:EVENT_SENDING_PAUSED];
    enum SwrveTrackingState trackingStatePaused = [SwrveLocalStorage trackingState];
    XCTAssertEqual(EVENT_SENDING_PAUSED, trackingStatePaused);
    NSNumber *expected = [[self defaults] objectForKey:@"swrve_tracking_state"];
    XCTAssertEqual([expected intValue], trackingStatePaused);
}

- (void)testPermissionsKey {
    [SwrveLocalStorage savePermissions:@{@"SomeKey" : @"SomeValue"}];
    NSDictionary *expectedDic = [SwrveLocalStorage getPermissions];
    NSDictionary *expected = [[self defaults] dictionaryForKey:@"swrve_permission_status"];
    XCTAssertEqualObjects(expectedDic,expected);
    
    //remove from defaults
    [[self defaults] removeObjectForKey:@"swrve_permission_status"];
    expectedDic = [[self defaults] dictionaryForKey:@"swrve_permission_status"];
    XCTAssertNil(expectedDic);
    //it will still be in backup store
    expectedDic = [SwrveLocalStorage getPermissions];
    XCTAssertEqualObjects(expectedDic,@{@"SomeKey" : @"SomeValue"});
}

- (void)testAskForPermissionsKey {
    [SwrveLocalStorage saveAskedForPushPermission:true];
    bool result = [SwrveLocalStorage askedForPushPermission];
    bool expected = [[self defaults] objectForKey:@"swrve.asked_for_push_permission"];
    XCTAssertTrue(result == expected);
    
    //remove from defaults
    [[self defaults] removeObjectForKey:@"swrve.asked_for_push_permissions"];
    expected = [[self defaults] objectForKey:@"swrve_permission_status"];
    XCTAssertFalse(expected);
    //it will still be in backup store
    expected = [SwrveLocalStorage askedForPushPermission];
    XCTAssertTrue(expected);
}

- (void)testSaveSwrveUsers {
    SwrveUser *user1 = [[SwrveUser alloc]initWithExternalId:@"TestEx1" swrveId:@"TestSw1" verified:YES];
    SwrveUser *user2 = [[SwrveUser alloc]initWithExternalId:@"TestEx2" swrveId:@"TestSw2" verified:NO];
    NSArray *mArray = @[user1,user2];

    SwrveProfileManager *pm = [SwrveProfileManager new];
    NSData *data = [pm archiveSwrveUserArray:mArray];
    [SwrveLocalStorage saveSwrveUsers:data];
    
    NSData *swrveUsers = [SwrveLocalStorage swrveUsers];
    NSData *result = swrveUsers;
    NSData *expected = [[self defaults] objectForKey:@"swrve_users"];
    XCTAssertEqualObjects(result,expected);
    
    //remove from defaults
    [[self defaults] removeObjectForKey:@"swrve_users"];
    expected = [[self defaults] objectForKey:@"swrve_users"];
    XCTAssertNil(expected);
    //it will still be in backup store
    expected = swrveUsers;
    XCTAssertEqualObjects(expected,data);
    
    NSArray *expectedArray = [pm swrveUsers];

    XCTAssertEqualObjects(expectedArray,mArray);
}

/* HELPER METHODS */

- (void)resetDefaults {
    NSString *appDomain = [[NSBundle mainBundle] bundleIdentifier];
    [[NSUserDefaults standardUserDefaults] removePersistentDomainForName:appDomain];
    [[NSUserDefaults standardUserDefaults] synchronize];
    [self deleteFilesInDirectory:[SwrveLocalStorage applicationSupportPath]];
    [self deleteFilesInDirectory:[SwrveLocalStorage documentPath]];
}

- (void)deleteFilesInDirectory:(NSString *)directory {
    NSFileManager *fileMgr = [NSFileManager defaultManager];
    NSArray *fileArray = [fileMgr contentsOfDirectoryAtPath:directory error:nil];
    for (NSString *filename in fileArray)  {
        [fileMgr removeItemAtPath:[directory stringByAppendingPathComponent:filename] error:NULL];
    }
}

@end
